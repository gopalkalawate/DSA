#include<iostream>
#include<vector>
#include<string>

using namespace std;

class Node{
    public : 
        Node *list[26];
        bool flag = false; // flag indicated the end of word
};

class Trie{
    public:
        Node *root;

        Trie(){
            root = new Node();
        }

        void insert(const string &word){
            Node *node = root;
            for(char c : word){
                int ch = c - 'a';
                if(!node->list[ch]){
                    node->list[ch] = new Node();
                }
                node = node->list[ch];
            }
            node->flag = true; // end of word indicated
        }

        bool search(const string &word){
            Node *node = root;
            for(char c : word){
                int ch = c - 'a';
                if(!node->list[ch]){
                    return false;
                }
                node = node->list[ch];
            }
            return node->flag;
        }

        bool hasPrefix(const string &prefix) {
            Node *node = root;
            for(char c : prefix) {
                int ch = c - 'a';
                if(!node->list[ch]) {
                    return false;
                }
                node = node->list[ch];
            }
            return true;
        }

};

int main(){ // only the test cases were generated by chatgpt the functions were written by myself
    Trie trie;
    
    // Insert words into the trie
    trie.insert("apple");
    trie.insert("app");
    trie.insert("bat");
    trie.insert("ball");

    // Test cases to check word search
    cout << (trie.search("apple") ? "apple found" : "apple not found") << endl;
    cout << (trie.search("app") ? "app found" : "app not found") << endl;
    cout << (trie.search("bat") ? "bat found" : "bat not found") << endl;
    cout << (trie.search("ball") ? "ball found" : "ball not found") << endl;
    cout << (trie.search("batman") ? "batman found" : "batman not found") << endl; // should not be found

     // Test cases for prefix search
    cout << (trie.hasPrefix("ap") ? "prefix 'ap' exists" : "prefix 'ap' doesn't exist") << endl;
    cout << (trie.hasPrefix("ba") ? "prefix 'ba' exists" : "prefix 'ba' doesn't exist") << endl;
    cout << (trie.hasPrefix("cat") ? "prefix 'cat' exists" : "prefix 'cat' doesn't exist") << endl;

    
    return 0;
}